#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('base-api-express:server');
var http = require('http');
var mongoose = require('mongoose');
var config = {
    env: "development",
    db: {
        mongo:{
            uri: 'mongodb://mongo:27020/mongodbgraphql',
            opts: {
                useNewUrlParser: true,
                useUnifiedTopology: true
            }
        }
    }
};


/**
 * Mongo connection
 */

// Retry connection
const connectWithRetry = () => {
    console.log('MongoDB connection with retry');
    return mongoose.connect(config.db.mongo.uri, config.db.mongo.opts);
};

// Exit application on error
mongoose.connection.on('error', err => {
    console.log(`MongoDB connection error: ${err}`);
    setTimeout(connectWithRetry, 5000)
    // process.exit(-1)
});

mongoose.connection.on('connected', () => {
    console.log('MongoDB is connected')
});

if (config.env === 'development') {
    mongoose.set('debug', true)
}

const connect = () => {
    connectWithRetry()
};

try {
    connect();

} catch (e) {

    console.log('Something goes wrong!');
    console.log(e);

}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
